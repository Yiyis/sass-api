-- Simple Supabase-compatible schema for api_keys table
-- Run this in your Supabase SQL Editor

-- Drop table if it exists (for testing)
DROP TABLE IF EXISTS api_keys;

-- Create the api_keys table with correct Supabase types
CREATE TABLE api_keys (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  key VARCHAR(255) NOT NULL UNIQUE,
  type VARCHAR(50) DEFAULT 'dev',
  usage INTEGER DEFAULT 0,
  permissions TEXT[] DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_used TIMESTAMP
);

-- Add constraint for type values
ALTER TABLE api_keys ADD CONSTRAINT check_type CHECK (type IN ('dev', 'live', 'test'));

-- Create indexes for better performance
CREATE INDEX idx_api_keys_key ON api_keys(key);
CREATE INDEX idx_api_keys_type ON api_keys(type);
CREATE INDEX idx_api_keys_created_at ON api_keys(created_at DESC);

-- Enable Row Level Security
ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;

-- Create a simple policy that allows all operations
-- WARNING: This is for development only - customize for production
CREATE POLICY "Allow all operations" ON api_keys
  FOR ALL USING (true);

-- Insert sample data
INSERT INTO api_keys (name, description, key, type, usage, permissions) VALUES
  ('default', 'Main API key for production environment', 'api_live_1234567890abcdef', 'live', 1250, ARRAY['read', 'write']),
  ('development', 'API key for development and testing', 'api_dev_abcdef1234567890', 'dev', 450, ARRAY['read']);

-- Verify the table was created
SELECT * FROM api_keys;
