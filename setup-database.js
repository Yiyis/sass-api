// Setup database script
// Run this with: node setup-database.js

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç Setting up Supabase database...')
console.log('URL:', supabaseUrl)
console.log('Key length:', supabaseAnonKey?.length || 0)

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing environment variables!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function setupDatabase() {
  try {
    console.log('‚úÖ Supabase client created successfully')
    
    // Test basic connection
    console.log('üîç Testing basic connection...')
    const { data: testData, error: testError } = await supabase
      .from('api_keys')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.log('‚ùå Table access failed:', testError.message)
      
      if (testError.message.includes('does not exist')) {
        console.log('üìù Creating api_keys table...')
        await createTable()
      } else {
        console.error('‚ùå Unexpected error:', testError)
        return
      }
    } else {
      console.log('‚úÖ Table exists and is accessible!')
      await testTableOperations()
    }
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message)
  }
}

async function createTable() {
  try {
    console.log('üî® Creating api_keys table...')
    
    // Create the table using SQL
    const { error } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS api_keys (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          key VARCHAR(255) NOT NULL UNIQUE,
          type VARCHAR(50) DEFAULT 'dev',
          usage INTEGER DEFAULT 0,
          permissions TEXT[] DEFAULT '{}',
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW(),
          last_used TIMESTAMP
        );
        
        -- Add constraint for type values
        ALTER TABLE api_keys ADD CONSTRAINT IF NOT EXISTS check_type 
        CHECK (type IN ('dev', 'live', 'test'));
        
        -- Create indexes
        CREATE INDEX IF NOT EXISTS idx_api_keys_key ON api_keys(key);
        CREATE INDEX IF NOT EXISTS idx_api_keys_type ON api_keys(type);
        CREATE INDEX IF NOT EXISTS idx_api_keys_created_at ON api_keys(created_at DESC);
        
        -- Enable RLS
        ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;
        
        -- Create policy
        DROP POLICY IF EXISTS "Allow all operations" ON api_keys;
        CREATE POLICY "Allow all operations" ON api_keys
          FOR ALL USING (true);
      `
    })
    
    if (error) {
      console.log('‚ö†Ô∏è RPC method not available, trying alternative approach...')
      await createTableAlternative()
    } else {
      console.log('‚úÖ Table created successfully!')
      await insertSampleData()
    }
    
  } catch (error) {
    console.error('‚ùå Failed to create table:', error.message)
  }
}

async function createTableAlternative() {
  try {
    console.log('üî® Trying alternative table creation...')
    
    // Try to create table by inserting data (this will fail but create the table)
    const { error } = await supabase
      .from('api_keys')
      .insert([{
        name: 'test',
        description: 'Test key',
        key: 'test_key_123',
        type: 'dev',
        usage: 0,
        permissions: ['read']
      }])
    
    if (error && error.message.includes('does not exist')) {
      console.log('‚ùå Table creation failed. Please create it manually in Supabase SQL Editor:')
      console.log('üìã Copy and paste this SQL in your Supabase SQL Editor:')
      console.log('')
      console.log('-- Create api_keys table')
      console.log('CREATE TABLE api_keys (')
      console.log('  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,')
      console.log('  name VARCHAR(255) NOT NULL,')
      console.log('  description TEXT,')
      console.log('  key VARCHAR(255) NOT NULL UNIQUE,')
      console.log('  type VARCHAR(50) DEFAULT \'dev\',')
      console.log('  usage INTEGER DEFAULT 0,')
      console.log('  permissions TEXT[] DEFAULT \'{}\',')
      console.log('  created_at TIMESTAMP DEFAULT NOW(),')
      console.log('  updated_at TIMESTAMP DEFAULT NOW(),')
      console.log('  last_used TIMESTAMP')
      console.log(');')
      console.log('')
      console.log('-- Enable RLS')
      console.log('ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;')
      console.log('')
      console.log('-- Create policy')
      console.log('CREATE POLICY "Allow all operations" ON api_keys FOR ALL USING (true);')
    } else if (error) {
      console.error('‚ùå Insert failed:', error.message)
    } else {
      console.log('‚úÖ Table created and sample data inserted!')
    }
    
  } catch (error) {
    console.error('‚ùå Alternative approach failed:', error.message)
  }
}

async function insertSampleData() {
  try {
    console.log('üìù Inserting sample data...')
    
    const { error } = await supabase
      .from('api_keys')
      .insert([{
        name: 'default',
        description: 'Main API key for production environment',
        key: 'api_live_1234567890abcdef',
        type: 'live',
        usage: 1250,
        permissions: ['read', 'write']
      }, {
        name: 'development',
        description: 'API key for development and testing',
        key: 'api_dev_abcdef1234567890',
        type: 'dev',
        usage: 450,
        permissions: ['read']
      }])
    
    if (error) {
      console.error('‚ùå Failed to insert sample data:', error.message)
    } else {
      console.log('‚úÖ Sample data inserted successfully!')
    }
    
  } catch (error) {
    console.error('‚ùå Sample data insertion failed:', error.message)
  }
}

async function testTableOperations() {
  try {
    console.log('üß™ Testing table operations...')
    
    // Test read
    const { data: readData, error: readError } = await supabase
      .from('api_keys')
      .select('*')
    
    if (readError) {
      console.error('‚ùå Read test failed:', readError.message)
    } else {
      console.log('‚úÖ Read test passed. Found', readData?.length || 0, 'records')
    }
    
    // Test insert
    const testKey = {
      name: 'test_key',
      description: 'Test key for validation',
      key: 'test_' + Date.now(),
      type: 'dev',
      usage: 0,
      permissions: ['read']
    }
    
    const { data: insertData, error: insertError } = await supabase
      .from('api_keys')
      .insert([testKey])
      .select()
    
    if (insertError) {
      console.error('‚ùå Insert test failed:', insertError.message)
    } else {
      console.log('‚úÖ Insert test passed. Created key:', insertData?.[0]?.id)
      
      // Clean up test data
      await supabase
        .from('api_keys')
        .delete()
        .eq('name', 'test_key')
    }
    
  } catch (error) {
    console.error('‚ùå Table operations test failed:', error.message)
  }
}

// Run the setup
setupDatabase()
