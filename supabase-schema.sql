-- Create the api_keys table
CREATE TABLE IF NOT EXISTS api_keys (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  key VARCHAR(255) NOT NULL UNIQUE,
  type VARCHAR(50) DEFAULT 'dev' CHECK (type IN ('dev', 'live', 'test')),
  usage INTEGER DEFAULT 0,
  permissions TEXT[] DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  last_used TIMESTAMPTZ
);

-- Create an index on the key field for faster lookups
CREATE INDEX IF NOT EXISTS idx_api_keys_key ON api_keys(key);

-- Create an index on the type field
CREATE INDEX IF NOT EXISTS idx_api_keys_type ON api_keys(type);

-- Create an index on created_at for sorting
CREATE INDEX IF NOT EXISTS idx_api_keys_created_at ON api_keys(created_at DESC);

-- Enable Row Level Security (RLS)
ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows all operations (you can customize this based on your auth needs)
-- Note: This is a basic policy - you should customize it for production
CREATE POLICY "Allow all operations for now" ON api_keys
  FOR ALL USING (true);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER update_api_keys_updated_at 
  BEFORE UPDATE ON api_keys 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample data (optional)
INSERT INTO api_keys (name, description, key, type, usage, permissions) VALUES
  ('default', 'Main API key for production environment', 'api_live_1234567890abcdef', 'live', 1250, ARRAY['read', 'write']),
  ('development', 'API key for development and testing', 'api_dev_abcdef1234567890', 'dev', 450, ARRAY['read'])
ON CONFLICT (key) DO NOTHING;
